{
  "speakers": [
    {
      "name": "Pascal Welsch",
      "bio": "About",
      "companyName": "",
      "companyUrl": "",
      "githubUrlOrHandle": "",
      "xUrlOrHandle": "",
      "linkedinUrlOrHandle": "",
      "webUrl": ""
    }
  ],
  "title": "Flipping the Testing Pyramid - Smarter Widget Testing with Spot & Robots",
  "videoUrl": "https://youtu.be/53NL68ZAfUk",
  "description": "When Mike Cohan introduced the testing pyramid in 2009, it made perfect sense for backend-heavy systems. But today’s Flutter apps are different: Most complexity lives in the UI. And unlike back then, we now have fast, reliable, headless UI tests: Widget tests.\r\n\r\nSo why stick to outdated testing strategies, which only cover a small chunk of your app. Let’s learn how widget tests can easily cover 80% of your codebase, testing multiple screen sizes at once.\r\n\r\nThe closer your tests mirror the human interactions with your app, the better for your users. Our Plan:\r\n\r\n1. Pump your entire app: runApp(MyApp());\r\n2. Build Testing Robots (like Square does): This design pattern translates user journeys into clean, readable test code.\r\n3. Debug your tests with the new package:spot timeline, which captures every frame of your test for debugging automatically\r\n\r\nWith this setup, your widget tests become the backbone of your app, robust enough to survive even the biggest refactor. After all, app architecture is irrelevant from a user’s perspective.\r\n\r\nPascal (Flutter GDE) has been building fully-tested enterprise applications since 2015 and is a long-time contributor to the Dart testing ecosystem.\r\n\r\nKey Takeaways:\r\n\r\n- Rethink traditional testing strategies from 2009\r\n- Learn Full App Testing\r\n- Understand the Robot pattern\r\n- Debug widget tests visually with the Spot Timeline",
  "resources": [],
  "recommendations": [],
  "day": "Thursday",
  "time": "10:30 AM",
  "startsAt": "2025-09-25T10:30:00",
  "endsAT": "2025-09-25T11:10:00",
  "room": "Widget Way",
  "format": "Session",
  "level": "Intermediate",
  "topics": [
    "State Management",
    "Testing",
    "Architecture"
  ]
}